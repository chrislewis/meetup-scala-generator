sealed abstract class {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}(val value: {{#dataType}}{{.}}{{/dataType}}{{^dataType}}{{datatype}}{{/dataType}}) extends Product with Serializable
{{#allowableValues}}{{#enumVars}}case object {{name}} extends {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}({{{value}}})
{{/enumVars}}{{/allowableValues}}
object {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}} {

  private val valueMap =
    Map(
      {{#allowableValues}}{{#enumVars}}{{{value}}} -> {{name}}{{^-last}},
      {{/-last}}{{/enumVars}}
    {{/allowableValues}})

  /**
   * The set of `{{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}` instances.
   */
  val values: Set[{{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}] = valueMap.values.toSet

  /**
   * Get the `{{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}` instance mapped by the given {{#dataType}}{{.}}{{/dataType}}{{^dataType}}{{datatype}}{{/dataType}} value,
   * if there is one.
   */
  def fromValue(value: {{#dataType}}{{.}}{{/dataType}}{{^dataType}}{{datatype}}{{/dataType}}): Option[{{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}] = valueMap.get(value)

  import {{invokerPackage}}.Codec
  import org.json4s._

  implicit val {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}Codec = new Codec[{{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}] {
    implicit val formats = org.json4s.DefaultFormats

    def encode(a: {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}): JValue =
      a match {
        {{#allowableValues}}{{#enumVars}}case {{name}} => Extraction.decompose({{{value}}})
        {{/enumVars}}{{/allowableValues}}
      }

    def decode(j: JValue): Either[String, {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}] =
      try {
        val raw = j.extract[{{#dataType}}{{.}}{{/dataType}}{{^dataType}}{{datatype}}{{/dataType}}]
        fromValue(raw).toRight(s"[$raw] does not map to a known [{{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}] enum instance!")
      } catch {
        case scala.util.control.NonFatal(e) => Left(e.getMessage)
      }

  }
}