package {{package}}

{{#imports}}import {{import}}
{{/imports}}

{{#models}}
    {{#model}}
        class {{classname}}Test extends Funspec {

            describe("A {{classname}}") {

                val testEntity = {{classname}}(
                    {{#vars}}
                        {{name}} =
                        {{#required}}
                            {{#isString}}"autogenerated test string"{{/isString}}
                            {{#isInteger}}12345{{/isInteger}}
                            {{#isLong}}123456789{{/isLong}}
                            {{#isFloat}}12345.0{{/isFloat}}
                            {{#isDouble}}24680.0{{/isDouble}}
                            {{#isBoolean}}false{{/isBoolean}}
                            {{#isDate}}LocalDate.now(){{/isDate}}
                            {{#isDateTime}}ZonedDateTime.now(){{/isDateTime}}
                            {{#vendorExtensions.isTimestamp}}Instant.now(){{/vendorExtensions.isTimestamp}}
                            {{#isListContainer}} {{datatype}}() {{/isListContainer}}
                            {{#isMapContainer}} {{datatype}}() {{/isMapContainer}}
                            {{#hasMore}},{{/hasMore}}
                        {{/required}}
                        {{^required}}
                            None
                            {{#hasMore}},{{/hasMore}}
                        {{/required}}
                    {{/vars}}
                )
                it("should be serializable to JSON and back to an equivalent instance") {
                    val json = Serializer.serialize(entity)
                    val either = Serializer.deserialize[{{classname}}](json)
                    either.fold(
                        err => fail(s"Failed to deserialize: $err"),
                        deserializedEntity => assert(deserializedEntity == testEntity)
                    )
                }
        }
    {{/model}}
{{/models}}