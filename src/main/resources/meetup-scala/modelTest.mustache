package {{package}}

{{#imports}}import {{import}}
{{/imports}}

{{#models}}
    {{#model}}
        class {{classname}}Test extends Funspec {

            describe("A {{classname}}") {

                it("should be serializable to JSON and back to an equivalent instance (options are Some)") {

                    // Options on the entity are instantiated as Some(xyz)
                    val testEntitySomes = {{classname}}(
                    {{#vars}}
                        {{name}} = {{>modelTestValuesPerTypeSome}}{{#hasMore}},{{/hasMore}}
                    {{/vars}}
                    )

                    // Options on the entity are instantiated as None
                    val testEntityNones = {{classname}}(
                    {{#vars}}
                        {{name}} = {{>modelTestValuesPerTypeNone}}{{#hasMore}},{{/hasMore}}
                    {{/vars}}
                    )

                    val entityList = List(testEntitySomes, testEntityNones)

                    entityList.foreach { entity =>
                        val json = Serializer.serialize(entity)
                        val either = Serializer.deserialize[{{classname}}](json)
                        either.fold(
                            err => fail(s"Failed to deserialize: $err"),
                            deserializedEntity => assert(deserializedEntity == entity)
                        )
                    }
                }
            }
        }
    {{/model}}
{{/models}}