package {{invokerPackage}}

sealed trait ParameterValue {
  def apply(rawValue: String): ParameterValue
}

abstract class ParameterValue {
  def value: Either[InvalidParameterType, Any]
}

object ParameterValue {
  case class StringValue(val value: Either[InvalidParameterType, String]) extends ParameterValue
  object StringValue extends ParameterValue {
    override def apply(rawValue: String): StringValue = {
      StringValue(Right(rawValue))
    }
  }

  case class IntValue(val value: Either[InvalidParameterType, Int]) extends ParameterValue
  object IntValue extends ParameterValue {
    override def apply(rawValue: String): IntValue = {
      try {
        val value = Right(rawValue.toInt)
      } catch {
        case e: Exception => val value = Left(InvalidParameterError("Int"))
      }
      IntValue(value)
    }
  }
}

case object InvalidParameterError(paramType: String)
