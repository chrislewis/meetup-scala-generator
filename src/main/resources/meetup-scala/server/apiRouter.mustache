package {{package}}
{{#operations}}
{{#imports}}import {{import}}
{{/imports}}

import io.netty.buffer.ByteBuf
import io.netty.handler.codec.http.HttpResponseStatus
import io.reactivex.netty.protocol.http.server.{HttpServerRequest, HttpServerResponse, RequestHandler}

import io.netty.handler.codec.http.{HttpHeaderNames, HttpResponseStatus}

import {{invokerPackage}}.{Router, Serializer, Codec, Service, Util}

import java.nio.charset.Charset

import rx.functions.Func1
import rx.{Observable => JObservable}

class {{classname}}TestRouter(api: {{classname}}) {
  def handleRequest(request: HttpServerRequest[ByteBuf], response: HttpServerResponse[ByteBuf]): rx.Observable[Void] = {
    val path = request.getPath.split("/").toList.drop(1)
    val method = request.getHttpMethod.name().toUpperCase()

    (path, method) match { {{#operation}}
      case ({{{vendorExtensions.x-meetup-scala-op-case}}} :: Nil, "{{httpMethod}}") =>
        {{#hasBodyParam}}{{>server/entityBody}}{{/hasBodyParam}}{{#hasFormParams}}{{>server/entityBody}}{{/hasFormParams}}

        /* (non-entity params) */
        {{#hasQueryParams}}val queryParams = request.getQueryParameters{{/hasQueryParams}}
        {{#allParams}}
        {{#isPathParam}}/* path param: {{paramName}} */
        val param_{{paramName}}: {{dataType}} = {{paramName}}.to{{dataType}}{{/isPathParam}}
        {{#isQueryParam}}/* query param: {{paramName}} */
        val param_{{paramName}}: {{^required}}Option[{{/required}}{{dataType}}{{^required}}]{{/required}} = {{^required}}Option({{/required}}queryParams.get("{{paramName}}"){{^required}}).map(_{{/required}}.get(0).to{{dataType}}{{^required}}){{/required}}{{/isQueryParam}}
        {{/allParams}}

        val result: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Unit{{/returnType}} = api.{{operationId}}({{#allParams}}param_{{paramName}}{{#hasMore}}, {{/hasMore}}{{/allParams}})
        respond(result, response)
        /* (end non-entity params) */

        {{#hasBodyParam}} }} {{/hasBodyParam}}{{#hasFormParams}} }} {{/hasFormParams}}
{{/operation}}
      case _ => notFoundResponse(response)
    }
  }

  def respond[A](messageObj: A, response: HttpServerResponse[ByteBuf])(implicit codec: Codec[A]): rx.Observable[Void] = {
    val message = Serializer.serialize(messageObj)
    response.setStatus(HttpResponseStatus.OK)
    val content: ByteBuf =
    response.getAllocator
      .buffer(message.getBytes.length)
      .writeBytes(message.getBytes)
    val headers = response.getHeaders
    headers.set(HttpHeaderNames.CONTENT_LENGTH, message.getBytes.length)
    headers.set(HttpHeaderNames.CONTENT_TYPE, "application/json")
    response.write(content)
    response.close(true)
  }

  def badRequest(response: HttpServerResponse[ByteBuf]): rx.Observable[Void] =
    stringResponse(response, HttpResponseStatus.BAD_REQUEST, "Bad request")

  def notFoundResponse(response: HttpServerResponse[ByteBuf]): rx.Observable[Void] =
    stringResponse(response, HttpResponseStatus.NOT_FOUND, "Service not found")

  def stringResponse(response: HttpServerResponse[ByteBuf], status: HttpResponseStatus, message: String): rx.Observable[Void] = {
    response.setStatus(status)
    response.writeString(message)
    response.close(true)
  }
}
{{/operations}}