package {{invokerPackage}}

import java.io.IOException
import java.net.URI
import okhttp3._
import scala.concurrent.Future

final class ApiInvoker private (okHttp: OkHttpClient) {
  import ApiInvoker.{getRequestBuilder, JsonMediaType}

  def invokeDELETE[A : Codec](baseUrl: String, path: String, queryParams: Map[String, String], form: Map[String, String]): Future[A] = {
    val req = getRequestBuilder(baseUrl, path, queryParams)
      .delete()
      .build()

    dispatchCodecRequest[A](req)
  }

  def invokePOST[A : Codec](baseUrl: String, path: String, queryParams: Map[String, String], form: Map[String, String]): Future[A] = {
    val reqBuilder =
      getRequestBuilder(baseUrl, path, queryParams)

    val req =
      (if(form.nonEmpty)
        reqBuilder.post(
          form.foldLeft(new FormBody.Builder()) {
            case (acc, (k, v)) => acc.add(k, v)
          }
          .build()
        )
      else
        reqBuilder).build()

    dispatchCodecRequest[A](req)
  }

  def invokePOST[A : Codec, B : Codec](baseUrl: String, path: String, queryParams: Map[String, String], body: A): Future[B] = {
    val serializedBody: String = Serializer.serialize[A](body)

    val req =
      getRequestBuilder(baseUrl, path, queryParams)
        .post(RequestBody.create(JsonMediaType, serializedBody))
        .build()

    dispatchCodecRequest[B](req)
  }

  def invokeGET[A : Codec](baseUrl: String, path: String, queryParams: Map[String, String], form: Map[String, String]): Future[A] = {
    val req = getRequestBuilder(baseUrl, path, queryParams)
      .get()
      .build()

    dispatchCodecRequest[A](req)
  }

  private def dispatchRequest[A](req: Request, f: String => Either[Exception, A]): Future[A] = {
    val promise = scala.concurrent.Promise[A]()
    okHttp.newCall(req).enqueue(new Callback {
      override def onFailure(call: Call, e: IOException): Unit =
        promise.failure(e)

      override def onResponse(call: Call, response: Response): Unit =
        try {
          f(response.body().string()) match {
            case Left(e) => promise.failure(e)
            case Right(a) => promise.success(a)
          }
        } catch {
          case t: Throwable =>
            promise.failure(t)
            throw t
        }
      })
    promise.future
  }

  private def dispatchCodecRequest[A : Codec](req: Request): Future[A] =
    dispatchRequest(req, { s =>
      Serializer.deserialize[A](s)
        .left
        .map(new RuntimeException(_))
    })
}

object ApiInvoker {
  val JsonMediaType = MediaType.parse("application/json; charset=utf-8")

  val defaultOkkHttp: OkHttpClient = new OkHttpClient.Builder()
    //.dispatcher() // TODO configure executor service, thread pool, etc
    .build()

  val defaultApiInvoker: ApiInvoker = get(defaultOkkHttp)

  def resolvePort(uri: URI): Int =
    (uri.getPort, uri.getScheme.toLowerCase) match {
      case (-1, "http") => 80
      case (-1, "https") => 443
      case (port, _) => port
    }

  def getRequestBuilder(baseUrl: String, path: String, queryParams: Map[String, String]): Request.Builder = {
    val uri = new URI(baseUrl)
    val finalPath = uri.getPath + (if(path.startsWith("/")) path.drop(1) else path)
    val builder = new HttpUrl.Builder()
      .host(uri.getHost)
      .port(resolvePort(uri))
      .scheme(uri.getScheme)
      .addPathSegments(finalPath)

    val url =
      queryParams
        .foldLeft(builder) {
          case (acc, (name, value)) => acc.addQueryParameter(name, value)
        }
      .build()

    new Request.Builder().url(url)
  }

  def get(okHttp: OkHttpClient = defaultOkkHttp): ApiInvoker =
    new ApiInvoker(okHttp)
}