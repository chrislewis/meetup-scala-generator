package {{package}}

import collection.mutable.MapBuilder

{{#operations}}
{{#imports}}import {{import}}
{{/imports}}

import {{invokerPackage}}.{ApiInvoker, Codec}
import scala.concurrent.Future

final class {{classname}}(basePath: String, invoker: ApiInvoker) {

{{#operation}}
    def {{operationId}}({{#allParams}}{{paramName}}: {{^required}}Option[{{/required}}{{dataType}}{{^required}}]{{/required}}{{#hasMore}}, {{/hasMore}}{{/allParams}}): Future[{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Unit{{/returnType}}] = {
    val path = "{{{path}}}"{{#pathParams}}.replaceAll("\\{" + "{{baseName}}" + "\\}", {{paramName}}.toString){{/pathParams}}

    // query params
    val queryParams = {
      val _params = new MapBuilder[String, String, Map[String, String]](Map.empty)
      {{#queryParams}}{{#required}}_params += ("{{paramName}}" -> {{paramName}}.toString){{/required}}{{^required}}{{paramName}}.foreach { v => _params += ("{{paramName}}" -> v.toString) }{{/required}}
      {{/queryParams}}
      _params.result()
    }

    // form params
    val form = {
      val _params = new MapBuilder[String, String, Map[String, String]](Map.empty)
      {{#formParams}}{{#required}}_params += ("{{paramName}}" -> {{paramName}}.toString){{/required}}{{^required}}{{paramName}}.foreach { v => _params += ("{{paramName}}" -> v.toString) }{{/required}}
      {{/formParams}}
      _params.result()
    }

    {{#bodyParam}}
    invoker.invoke{{httpMethod}}[{{dataType}}, {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Unit{{/returnType}}](basePath, path, queryParams, {{paramName}})
    {{/bodyParam}}
    {{^bodyParam}}
    invoker.invoke{{httpMethod}}[{{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}Unit{{/returnType}}](basePath, path, queryParams, form)
    {{/bodyParam}}
  }
{{/operation}}
}
{{/operations}}

object {{classname}} {
  def get(basePath: String = "{{basePath}}", invoker: ApiInvoker = ApiInvoker.defaultApiInvoker): {{classname}} =
    new {{classname}}(basePath, invoker)
}