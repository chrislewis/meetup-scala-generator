import org.json4s._

{{#hasEnums}}import org.json4s.CustomSerializer
{{#vars}}{{#isEnum}}import org.json4s.JsonAST.J{{#dataType}}{{.}}{{/dataType}}{{^dataType}}{{datatype}}{{/dataType}}
{{/isEnum}}{{/vars}}

{{#vars}}{{#isEnum}}object {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}CustomSerializer extends CustomSerializer[{{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}](_ =>(
  { case J{{#dataType}}{{.}}{{/dataType}}{{^dataType}}{{datatype}}{{/dataType}}(v) => {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}}.fromValue(v).getOrElse(sys.error(s"Cannot decode $v as {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}} instance!")) },
  { case e: {{#datatypeWithEnum}}{{.}}{{/datatypeWithEnum}}{{^datatypeWithEnum}}{{classname}}{{/datatypeWithEnum}} => J{{#dataType}}{{.}}{{/dataType}}{{^dataType}}{{datatype}}{{/dataType}}(e.value) }
)){{/isEnum}}{{/vars}}{{/hasEnums}}

implicit val {{classname}}Codec = new Codec[{{classname}}] {
  def encode(a: {{classname}})(implicit formats: Formats): JValue = Extraction.decompose(a)

  def decode(j: JValue)(implicit formats: Formats): Either[String, {{classname}}] =
    try {
      Right(j.extract[{{classname}}])
    } catch {
      case e: MappingException => Left(e.getCause.getMessage)
      case scala.util.control.NonFatal(e) => Left(e.getMessage)
    }
}

implicit val {{classname}}ListCodec = new Codec[List[{{classname}}]] {
  def encode(a: List[{{classname}}])(implicit formats: Formats): JValue = Extraction.decompose(a)

  def decode(j: JValue)(implicit formats: Formats): Either[String, List[{{classname}}]] =
    try {
      Right(j.extract[List[{{classname}}]])
    } catch {
      case e: MappingException => Left(e.getCause.getMessage)
      case scala.util.control.NonFatal(e) => Left(e.getMessage)
    }
}